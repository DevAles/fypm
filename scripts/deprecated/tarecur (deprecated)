#!/bin/bash
MAIN_DIR="$HOME/.local/share/rpms"
LOG_DIR="$MAIN_DIR/logs"
TASKSJSON="$MAIN_DIR/tasks.json"

# --------------------------- #
ensure_dirs() {
    if [[ ! -d "$MAIN_DIR" ]]; then
        mkdir "$MAIN_DIR"
    fi
    if [[ ! -d "$LOG_DIR" ]]; then
        mkdir "$LOG_DIR"
    fi
}
verify_tasks_json() {
    if [[ ! -f "$TASKSJSON" ]]; then
        echo "The data file is missing! You don't have entered any tasks yet!"
        echo "Try 'tarecur add <task_name>' to add your first task."

        exit 1
    fi
}
tasks_read() {
    cat "$TASKSJSON"
}
tasks_write() {
    local TEMPTASKS
    TEMPTASKS="$MAIN_DIR/temp_tasks.json"

    # Ensure json existence
    if [[ ! -f "$TASKSJSON" ]]; then
        echo "[]" > "$TASKSJSON"
    fi

    jq "$1" "$TASKSJSON" > "$TEMPTASKS"
    mv "$TEMPTASKS" "$TASKSJSON"
}
get_uuid() {
    task "$1" +PARENT -DELETED uuids
}
get_last_instance() {
    local UUID
    local LAST_ENTRY
    UUID="$1"
    LAST_ENTRY=$(task "parent:$UUID" -DELETED export | jq -r\
        '. | map({ data: ., index: .entry }) | min_by(.entry) | .')

    echo "$LAST_ENTRY" | jq -r '.data.uuid'
}

# --------------------------- #
#           Actions
add_recurring_task() {
    local TASK_NAME
    local UUID
    TASK_NAME="$1"
    UUID="$(get_uuid "$1")"

    if [[ $(echo "$UUID" | awk '{print NF}') -gt 1 ]]; then
        echo "More than one UUID found for $TASK_NAME!"
        echo "It's only possible to add a recurring task if it has only one parent."
    elif [[ "$UUID" == "" ]]; then
        echo "No UUID found for $TASK_NAME!"
    elif [[ $(tasks_read | jq "map(select(. == \"$UUID\"))" | jq 'length') -gt 0 ]]; then
        echo "Task entry '$TASK_NAME' already exists!"
    else
        tasks_write ". += [\"$UUID\"]"

        echo "Recurring task $TASK_NAME added! :)"
    fi
}
list_recurring_tasks() {
    local IDS
    IDS_ARRAY=()

    # Get Ids
    if [[ $(tasks_read) == "[]" ]]; then
        echo "There are no recurring tasks."
        echo "You can add one with 'tarecur add <task_name>'! :)"
        exit 1
    fi

    for uuid in $(tasks_read | jq -r '.[]'); do
        IDS_ARRAY+=("$(task "$uuid" _ids)")
    done

    # Separate by comma
    IFS=','
    IDS=$(printf "%s," "${IDS_ARRAY[@]}")

    # Remove last comma
    IDS=${IDS%,}

    # List
    task "$IDS" all
}
rm_recurring_task() {
    local TASK_NAME
    local UUID
    TASK_NAME="$1"
    UUID="$(get_uuid "$1")"

    tasks_write '. | map(select(. != "'"$UUID"'"))'

    echo "Recurring task $TASK_NAME removed!"
}
ensure_recurring_task_instances() {
    exec > >(tee -a "$LOG_DIR"/tarecur_"$(date +%Y-%m-%d)".log)
    exec 2>&1

    echo "----------------------------------------"
    echo "    ENSURE RECURRING TASK INSTANCES"
    echo ""



    for uuid in $(tasks_read | jq -r '.[]'); do
        TASK_NAME="$(task "$uuid" export | jq -r '.[0].description' |
            sed 's/\s-.*//g' | sed 's/[/].*//g' | sed 's/[||].*//g')"
        TASK_IDS="$(task "'parent:$uuid'" _ids)"
        TASK_IDS_BY_NAME="$(task "$TASK_NAME" -TEMPLATE _ids)"

        if [[ "$TASK_IDS" == "" ]] && [[ "$TASK_IDS_BY_NAME" == "" ]]; then
            echo -e "\e[38;2;255;255;0;1m$TASK_NAME: No instances! "\
                "Adding new emergency instance...\e[0m"
            
            NEW_TASK=$(task "$(get_last_instance "$uuid")" duplicate | grep \
                -oP 'Created task \K\d+(?=\.)')
            
            task "$NEW_TASK" modify due:eod
        elif
            [[ "$(echo "$TASK_IDS" | wc -l)" -eq 1 ]] ||
          [[ "$(echo "$TASK_IDS_BY_NAME" | wc -l)" -eq 1 ]];
                then
                    echo -e "\e[38;2;0;255;0;1m$TASK_NAME: "\
                        "There is an instance! Skipping...\e[0m"
        else
              echo -e "\e[38;2;255;0;0m$TASK_NAME: "\
                "There are multiple instances?? "\
                "Verify it! - - - ERROR\e[0m"
        fi
    done

    echo ""
    echo "----------------------------------------"
}
# --------------------------- #

ensure_dirs || exit 1
case $1 in
    "add")
        add_recurring_task "$2"
        ;;
    "list")
        verify_tasks_json
        list_recurring_tasks
        ;;
    "rm")
        rm_recurring_task "$2"
        ;;
    "ensure")
        ensure_recurring_task_instances
        ;;
    *)
        echo "Wow, that's not a valid command! Try: { add | list | rm | ensure }"
        exit 1
        ;;
esac
