#!/bin/zsh

LAST_TASK_PATH=/tmp/.last_task

inform_filter() {
    echo "This was the filter inserted: '$FILTER'"
}

FILTER=$1

if [[ "$FILTER" == "" ]]; then
    echo "You must insert a filter!"
    exit 1
elif [[ "$FILTER" =~ ^[a-zA-Z]{1,2}$ ]]; then
    tastart-key "$FILTER"
    exit 0
else
    if [[ "$FILTER" == "last" ]]; then
        FILTER=$(cat $LAST_TASK_PATH)
    fi

    TASKS_COUNT=$(task "$FILTER" count);

    # Check task count to start
    if [[ "$TASKS_COUNT" -eq 0 ]]; then
        echo "No tasks to start!"
        inform_filter
        exit 1
    elif [[ "$TASKS_COUNT" -gt 1 ]]; then
        echo "More than one task to start!"
        inform_filter
        exit 1
    fi
fi

GET_TASKS=$(task +ACTIVE export)
ACTIVE_TASKS_COUNT=$(echo "$GET_TASKS" | jq -r 'length')

schedule_if_necessary () {
    local GET_WORKTIME
    GET_WORKTIME=$(task "$FILTER" export | jq -r '.[0].WT')

    if [[ "$GET_WORKTIME" == "NonSched" ]]; then
        yes no | tsched "$FILTER"
    fi
}
verify_worktime() {
    local GET_WORKTIME
    GET_WORKTIME=$(task "$FILTER" export | jq -r '.[0].WT')

    if [[ "$GET_WORKTIME" == "AllDay" ]]; then
        echo "You are trying to start a task that is AllDay!"
        echo "Verify and try again."

        return 1
    fi

    return 0
}
manage_lock() {
    local LOCK
    LOCK=/tmp/task.lock

    if [[ "$1" == "true" ]]; then
        echo "" > "$LOCK"
    else
        rm "$LOCK"
    fi
}
main() {
    manage_lock true

    # Verify if task worktime is AllDay
    verify_worktime
    if [[ "$?" -eq 1 ]]; then
        exit 1
    fi

    # Verify if task is a Divisory
    if [[ $(task "$FILTER" export  | jq --arg str 'Divisory' '.[0].tags | index($str)') != "null" ]]; then
        echo "You are trying to start a Divisory task!"
        exit 1
    fi

    GET_STATE=$(task "$FILTER" export | jq -r '.[0].STATE')

    GET_SEQUENCE=$(task "$FILTER" export | jq --arg str 'Sequence' '.[0].tags | index($str)')

    if [[ "$GET_STATE" == "Info" ]]; then
        INFORELAT=$(task "$FILTER" export | jq -r '.[0].INFORELAT')

        if [[ $INFORELAT != "null" ]]; then
            if [[ "$(task "$INFORELAT" export | jq --arg str 'Sequence' '.[0].tags | index($str)')" != "null" ]]; then
                tastart "$INFORELAT"
                exit 0
            else
                FILTER="$INFORELAT"
            fi
        else
            if [[ $GET_SEQUENCE == "null" ]]; then
                echo "You are trying to start a Info task without a INFORELAT!"
                exit 1
            fi

            NEXT=$(task "$FILTER" export | jq -r '.[0].SEQ_CURRENT')
            if [[ $NEXT == "null" || $NEXT == "" ]]; then
                echo "There is no next task."
                exit 1
            else
                NEXT_STATUS=$(task "$NEXT" export | jq -r '.[0].status')

                if [[ $NEXT_STATUS == "completed" ]]; then
                    FILTER=$(task "$NEXT" export | jq -r '.[0].SEQ_NEXT')
                else
                    FILTER="$NEXT"
                fi
            fi
        fi
    else
        if [[ $GET_SEQUENCE != "null" ]]; then
            if [[ "$(task "$FILTER" export | jq -r '.[0].TYPE')" != "SubTask" ]]; then
                echo "There's a problem! This is a +Sequence task, but is not a Time STATE and is not a SubTask!"
                exit 1
            else
                task "$MOTHER_UUID" modify SEQ_CURRENT:"$NEXT"
            fi
        fi
    fi


    TASK_JSON=$(task "$FILTER" export)

    # Implement something to put scripts on Sequencial tasks

    # Verify if task has a script
    if [[ "$(echo "$TASK_JSON" | jq --arg str 'WithScript' '.[0].tags | index($str)')" != "null" ]]; then
        tascripts $FILTER
    else
        # Reset apps volume if necessary
        pulsemixer --set-volume 80
        cvol spotify 100%
    fi

    # Stop Active Task
    if [[ "$ACTIVE_TASKS_COUNT" -gt 1 ]]; then
        echo "Há mais de uma task em execução!"
        exit 1
    else
        ACTIVE_ID="$(echo "$GET_TASKS" | jq '.[0].id')"
        ACTIVE_UUID="$(task "$ACTIVE_ID" export | jq -r '.[0].uuid' | sed 's/-.*//')"

        task "$ACTIVE_ID" stop;
    fi

    # Init Task
    task "$FILTER" start;

    if [[ "$2" != "--no-wt" ]]; then
        schedule_if_necessary
    fi

    # Log Last Task
    echo "$ACTIVE_UUID" > "$LAST_TASK_PATH"

    manage_lock false
}
main
