#!/bin/zsh
# $1 = Type
# $2 = Description
# $3 = Tag
# $4 = Temp Number
# $5 = Sequence/Temp Last Episode Number
# $6 = Initial Ep Number

TYPE=$1
DESCRIPTION=$2
TAG=$3
INITIAL=$4
LAST=$5

usage() {
    echo "Usage: taadd-seq _<TYPE> <DESCRIPTION> <TAG> <INITIAL_NUMBER> <LAST_NUMBER> [TEMP]"
}
verify_args() {
    if [[ $# -lt 5 ]]; then
        usage
        return 1
    elif [[ $# -gt 6 ]]; then
        usage
        return 1
    else
        if [[ -n $6 ]]; then
            if [[ "$TYPE" == "Book" ]]; then
                echo "You cannot specify TEMP if you are creating a book!"
                return 1
            else
                TEMP=$6
            fi
        fi
    fi
}
get_id() {
    read -r id
    echo $id | grep -oP 'Created task \K\d+(?=\.)'
}
main() {
    if [[ "$TYPE" == "Book" ]]; then
        PROJECT="CerebralLine.Reading"
    else
        PROJECT="Lazer.Watch"
    fi

    if [[ -n $TEMP ]]; then
        MOTHER_DESC="$DESCRIPTION (Temp $TEMP)"
    else
        MOTHER_DESC="$DESCRIPTION"
    fi

    MOTHER_ID=$(yes | taadd -y "$MOTHER_DESC" "$PROJECT" Dionysian Objective +Sequence "+$TYPE" | get_id)

    for ((i=$INITIAL; i <= $LAST; i++)); do
        if [[ "$TYPE" == "Book" ]]; then
            DESCRIPTION="CapÃ­tulo $i"
        else
            if [[ -n $TEMP ]]; then
                DESCRIPTION="T${TEMP}E$i"
            else
                DESCRIPTION="E$i"
            fi
        fi

        ARGS=("$MOTHER_ID" "$DESCRIPTION" "+ST_$TAG" "STYLE:Dionysian" "+Sequence" "+$TYPE")

        if [[ $i -eq $INITIAL ]]; then
            # Create new task
            CURRENT_TASK_ID=$(taaddsub "${ARGS[@]}" | get_id)
            CURRENT_TASK_UUID=$(task "$CURRENT_TASK_ID" uuids)

            # Set current to mother
            task "$MOTHER_ID" modify SEQ_CURRENT:"$CURRENT_TASK_UUID"

            # Set current task as previous on variable
            PREVIOUS_TASK_UUID=$CURRENT_TASK_UUID
        else
            if [[ -n $PREVIOUS_TASK_UUID ]]; then
                # Create new task and set your previous task
                CURRENT_TASK_ID=$(taaddsub "${ARGS[@]}" | get_id)
                CURRENT_TASK_UUID=$(task "$CURRENT_TASK_ID" uuids)

                # Set next and previous UDA's
                task "$CURRENT_TASK_UUID" modify SEQ_PREVIOUS:"$PREVIOUS_TASK_UUID"
                task "$PREVIOUS_TASK_UUID" modify SEQ_NEXT:"$CURRENT_TASK_UUID"

                # Set current task as previous on variable
                PREVIOUS_TASK_UUID=$(task "$CURRENT_TASK_ID" uuids)
            else
                echo "Something went wrong! The iterator isn't the initial ep, but has no previous task id!"
                exit 1
            fi
        fi
    done
}
verify_args $@ || exit 1
main
